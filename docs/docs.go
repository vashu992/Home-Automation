// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/actuator/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actuators"
                ],
                "summary": "Get all actuators",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (defaults: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Actuator"
                            }
                        }
                    }
                }
            }
        },
        "/actuator/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actuators"
                ],
                "summary": "Create a actuator",
                "parameters": [
                    {
                        "description": "Actuator object",
                        "name": "actuator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Actuator"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Actuator"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/actuator/delete/{id}": {
            "delete": {
                "tags": [
                    "actuators"
                ],
                "summary": "Delete a actuator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actuator ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/actuator/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actuators"
                ],
                "summary": "Get all actuators based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "rooms_id",
                        "name": "rooms_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "house_id",
                        "name": "house_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "floor_id",
                        "name": "floor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "area",
                        "name": "area",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "watt_consumption",
                        "name": "watt_consumption",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "occupancy",
                        "name": "occupancy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "heating_enabled",
                        "name": "heating_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "heating_type",
                        "name": "heating_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "cooling_enabled",
                        "name": "cooling_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "cooling_type",
                        "name": "cooling_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "ventilation_enabled",
                        "name": "ventilation_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ventilation_type",
                        "name": "ventilation_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "temperature",
                        "name": "temperature",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "humidity",
                        "name": "humidity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "light_level",
                        "name": "light_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "co2_level",
                        "name": "co2_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Actuator"
                            }
                        }
                    }
                }
            }
        },
        "/actuator/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actuators"
                ],
                "summary": "Update a actuator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actuator ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Actuator object",
                        "name": "actuator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Actuator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Actuator"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/actuator/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "actuators"
                ],
                "summary": "Get a actuator by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Actuator ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Actuator"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/floor/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "floors"
                ],
                "summary": "Get all floors",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default:1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default:10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Floor"
                            }
                        }
                    }
                }
            }
        },
        "/floor/delete/{id}": {
            "delete": {
                "tags": [
                    "floors"
                ],
                "summary": "Delete a floor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Floor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/floor/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "floors"
                ],
                "summary": "Get all floors based on filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "house_id",
                        "name": "house_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "area",
                        "name": "area",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "occupancy",
                        "name": "occupancy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "heating_enabled",
                        "name": "heating_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "heating_type",
                        "name": "heating_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "cooling_enabled",
                        "name": "cooling_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "cooling_type",
                        "name": "cooling_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ventilation_enabled",
                        "name": "ventilation_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ventilation_type",
                        "name": "ventilation_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "temperature",
                        "name": "temperature",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "humidity",
                        "name": "humidity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "light_level",
                        "name": "light_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "co2_false",
                        "name": "co2_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default:1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default:10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Floor"
                            }
                        }
                    }
                }
            }
        },
        "/floor/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "floors"
                ],
                "summary": "Update a floor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Floor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Floor object",
                        "name": "floor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Floor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Floor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/floor/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "floors"
                ],
                "summary": "Get a floor by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Floor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Floor"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/house/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Get all houses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default:10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.House"
                            }
                        }
                    }
                }
            }
        },
        "/house/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Create a house",
                "parameters": [
                    {
                        "description": "House object",
                        "name": "house",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.House"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.House"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/house/delete/{id}": {
            "delete": {
                "tags": [
                    "houses"
                ],
                "summary": "Delete a house",
                "parameters": [
                    {
                        "type": "string",
                        "description": "House ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/house/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Update a house",
                "parameters": [
                    {
                        "type": "string",
                        "description": "House ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "House object",
                        "name": "house",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.House"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.House"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/house/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "houses"
                ],
                "summary": "Get a house by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "House ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.House"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organization/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get all organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Organization"
                            }
                        }
                    }
                }
            }
        },
        "/organization/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Created a organization",
                "parameters": [
                    {
                        "description": "Organization object",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organization/delete/{id}": {
            "delete": {
                "tags": [
                    "organizations"
                ],
                "summary": "Delete a organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organization/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get all organizations based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "package_id",
                        "name": "package_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "package_type",
                        "name": "package_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "available_points",
                        "name": "available_points",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "available_number_of_rooms",
                        "name": "available_number_of_rooms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "available_number_of_floors",
                        "name": "available_number_of_floors",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "available_number_of_houses",
                        "name": "available_number_of_houses",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "available_number_of_users",
                        "name": "available_number_of_users",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "available_number_of_actuators",
                        "name": "available_number_of_actuators",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "available_number_of_sensors",
                        "name": "available_number_of_sensors",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Organization"
                            }
                        }
                    }
                }
            }
        },
        "/organization/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update a organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization object",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organization/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get a organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Organization"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pkg/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pkgs"
                ],
                "summary": "Get all pkgs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Package"
                            }
                        }
                    }
                }
            }
        },
        "/pkg/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pkgs"
                ],
                "summary": "Create a pkg",
                "parameters": [
                    {
                        "description": "Package object",
                        "name": "pkg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Package"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Package"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pkg/delete/{id}": {
            "delete": {
                "tags": [
                    "pkgs"
                ],
                "summary": "Delete a pkg",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pkg/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pkgs"
                ],
                "summary": "Get all pkgs based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "point_rate_id",
                        "name": "point_rate_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "price",
                        "name": "price",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Duration",
                        "name": "Duration",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limits",
                        "name": "limits",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number_of_rooms",
                        "name": "number_of_rooms",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number_of_house",
                        "name": "number_of_house",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number_of_floor",
                        "name": "number_of_floor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number_of_user",
                        "name": "number_of_user",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number_of_actuator",
                        "name": "number_of_actuator",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number_of_sensor",
                        "name": "number_of_sensor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "points",
                        "name": "points",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "benifits",
                        "name": "benifits",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "avilibility",
                        "name": "avilibility",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "fratures",
                        "name": "fratures",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Package"
                            }
                        }
                    }
                }
            }
        },
        "/pkg/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pkgs"
                ],
                "summary": "Update a pkg",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Package object",
                        "name": "pkg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Package"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Package"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pkg/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pkgs"
                ],
                "summary": "Get a pkg by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Package"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pointRate/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pointRates"
                ],
                "summary": "Get all pointRates",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.PointRate"
                            }
                        }
                    }
                }
            }
        },
        "/pointRate/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pointRates"
                ],
                "summary": "Create a pointRate",
                "parameters": [
                    {
                        "description": "PointRate object",
                        "name": "pointRate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PointRate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.PointRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pointRate/delete/{id}": {
            "delete": {
                "tags": [
                    "pointRates"
                ],
                "summary": "Delete a pointRate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PointRate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pointRate/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pointRates"
                ],
                "summary": "Get all pointRates based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "house",
                        "name": "house",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "floor",
                        "name": "floor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "room",
                        "name": "room",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "user",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "sensor",
                        "name": "sensor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "actuator",
                        "name": "actuator",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.PointRate"
                            }
                        }
                    }
                }
            }
        },
        "/pointRate/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pointRates"
                ],
                "summary": "Update a pointRate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PointRate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PointRate object",
                        "name": "pointRate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PointRate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PointRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pointRate/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pointRates"
                ],
                "summary": "Get a pointRate by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PointRate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PointRate"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/room/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Get all rooms",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Room"
                            }
                        }
                    }
                }
            }
        },
        "/room/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Create a room",
                "parameters": [
                    {
                        "description": "Room object",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Room"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Room"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/room/delete/{id}": {
            "delete": {
                "tags": [
                    "rooms"
                ],
                "summary": "Delete a room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/room/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Get all rooms based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "house_id",
                        "name": "house_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "floor_id",
                        "name": "floor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "location",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "area",
                        "name": "area",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "occupancy",
                        "name": "occupancy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "heating_enabled",
                        "name": "heating_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "heatin_type",
                        "name": "heatin_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "cooling_enabled",
                        "name": "cooling_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "cooling_type",
                        "name": "cooling_type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "ventilation_enabled",
                        "name": "ventilation_enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ventilation_type",
                        "name": "ventilation_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "temperature",
                        "name": "temperature",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "humidity",
                        "name": "humidity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "light_level",
                        "name": "light_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "co2_level",
                        "name": "co2_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Room"
                            }
                        }
                    }
                }
            }
        },
        "/room/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Update a room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Room object",
                        "name": "room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Room"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Room"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/room/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Get a room by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Room"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensor/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensors"
                ],
                "summary": "Get all sensors",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Sensor"
                            }
                        }
                    }
                }
            }
        },
        "/sensor/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensors"
                ],
                "summary": "Create a sensor",
                "parameters": [
                    {
                        "description": "Sensor object",
                        "name": "sensor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Sensor"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Sensor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensor/delete/{id}": {
            "delete": {
                "tags": [
                    "sensors"
                ],
                "summary": "Delete a sensor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sensor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensor/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensors"
                ],
                "summary": "Get all sensors based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "rooms_id",
                        "name": "rooms_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "house_id",
                        "name": "house_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "floor_id",
                        "name": "floor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_time",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_time",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "reading",
                        "name": "reading",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "unit",
                        "name": "unit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "refresh_rate",
                        "name": "refresh_rate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "min_reading",
                        "name": "min_reading",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "max_reading",
                        "name": "max_reading",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Sensor"
                            }
                        }
                    }
                }
            }
        },
        "/sensor/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensors"
                ],
                "summary": "Update a sensor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sensor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sensor object",
                        "name": "sensor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Sensor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Sensor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensor/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensors"
                ],
                "summary": "Get a sensor by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sensor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Sensor"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensorreading/all": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensorReadings"
                ],
                "summary": "Get all sensorReadings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SensorReading"
                            }
                        }
                    }
                }
            }
        },
        "/sensorreading/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensorReadings"
                ],
                "summary": "Create a sensor",
                "parameters": [
                    {
                        "description": "SensorReading object",
                        "name": "sensor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SensorReading"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.SensorReading"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensorreading/delete/{id}": {
            "delete": {
                "tags": [
                    "sensorReadings"
                ],
                "summary": "Delete a sensor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SensorReading ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensorreading/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensorReadings"
                ],
                "summary": "Get all sensorReadings based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sensor_id",
                        "name": "sensor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "reading",
                        "name": "reading",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_at",
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_at",
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start_date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end_date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SensorReading"
                            }
                        }
                    }
                }
            }
        },
        "/sensorreading/update/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensorReadings"
                ],
                "summary": "Update a sensor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SensorReading ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SensorReading object",
                        "name": "sensor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SensorReading"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SensorReading"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensorreading/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensorReadings"
                ],
                "summary": "Get a sensor by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SensorReading ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SensorReading"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/all": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number (Default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page of results per page (Default:10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    }
                }
            }
        },
        "/user/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/filter": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users based on given filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "org_id",
                        "name": "org_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "publisher",
                        "name": "publisher",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "password",
                        "name": "password",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "primary_mobile_number",
                        "name": "primary_mobile_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "secondary_mobile_number",
                        "name": "secondary_mobile_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "landline_number",
                        "name": "landline_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "active_status",
                        "name": "active_status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "address_type",
                        "name": "address_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "house_no",
                        "name": "house_no",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "house_name",
                        "name": "house_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "lane_number",
                        "name": "lane_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "lane_name",
                        "name": "lane_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "landmark",
                        "name": "landmark",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "district",
                        "name": "district",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "post",
                        "name": "post",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "city",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "village",
                        "name": "village",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "nation",
                        "name": "nation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "created_by",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "updated_by",
                        "name": "updated_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "start date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "end date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    }
                }
            }
        },
        "/user/sighin": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "SighIn user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserSignIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful SighIn ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/sighup": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "SighUp a user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful SighUp",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/update/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyPath": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID ",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID ",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "model.Actuator": {
            "type": "object",
            "required": [
                "craeted_by",
                "floor_id",
                "house_id",
                "name",
                "room_id"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "co2_level": {
                    "type": "string"
                },
                "cooling_enabled": {
                    "type": "boolean"
                },
                "cooling_type": {
                    "type": "string"
                },
                "craeted_at": {
                    "type": "string"
                },
                "craeted_by": {
                    "type": "string"
                },
                "discription": {
                    "type": "string"
                },
                "floor_id": {
                    "type": "string"
                },
                "heating_enabled": {
                    "type": "string"
                },
                "heating_type": {
                    "type": "string"
                },
                "house_id": {
                    "type": "string"
                },
                "humidity": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "light_level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "occupancy": {
                    "type": "string"
                },
                "room_id": {
                    "type": "string"
                },
                "temperature": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "ventilation_enabled": {
                    "type": "boolean"
                },
                "ventilation_type": {
                    "type": "string"
                },
                "watt_consuption": {
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model.Floor": {
            "type": "object",
            "required": [
                "house_id",
                "name"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "co2_level": {
                    "type": "string"
                },
                "cooling_Type": {
                    "type": "string"
                },
                "cooling_enabled": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "heating_enabled": {
                    "type": "boolean"
                },
                "heating_type": {
                    "type": "string"
                },
                "house_id": {
                    "type": "string"
                },
                "humidity": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "light_level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "occupancy": {
                    "type": "string"
                },
                "temperature": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "ventilation_enabled": {
                    "type": "boolean"
                },
                "ventilation_type": {
                    "type": "string"
                }
            }
        },
        "model.House": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "number_of_floor": {
                    "type": "integer"
                },
                "occupancy": {
                    "type": "string"
                },
                "updatedBy": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Organization": {
            "type": "object",
            "required": [
                "email",
                "name",
                "package_type",
                "passward"
            ],
            "properties": {
                "available_number_of_floors": {
                    "type": "integer"
                },
                "available_number_of_house": {
                    "type": "integer"
                },
                "available_number_of_rooms": {
                    "type": "integer"
                },
                "available_number_of_sensors": {
                    "type": "integer"
                },
                "available_number_of_users": {
                    "type": "integer"
                },
                "available_point": {
                    "type": "integer"
                },
                "created": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "package_id": {
                    "type": "string"
                },
                "package_type": {
                    "type": "string"
                },
                "passward": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "model.Package": {
            "type": "object",
            "required": [
                "created_at",
                "duration",
                "price",
                "status"
            ],
            "properties": {
                "availibility": {
                    "type": "string"
                },
                "benefits": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "features": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "limit": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number_of_actuator": {
                    "type": "integer"
                },
                "number_of_floor": {
                    "type": "integer"
                },
                "number_of_house": {
                    "type": "integer"
                },
                "number_of_room": {
                    "type": "integer"
                },
                "number_of_sensor": {
                    "type": "integer"
                },
                "number_of_user": {
                    "type": "integer"
                },
                "point": {
                    "type": "integer"
                },
                "point_rate_Id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "status": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "model.PointRate": {
            "type": "object",
            "required": [
                "floor",
                "house",
                "name",
                "room",
                "sensor",
                "user"
            ],
            "properties": {
                "actuator": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "floor": {
                    "type": "integer"
                },
                "house": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "room": {
                    "type": "integer"
                },
                "sensor": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "user": {
                    "type": "integer"
                }
            }
        },
        "model.Room": {
            "type": "object",
            "required": [
                "fllor_id",
                "house_id"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "co2_level": {
                    "type": "string"
                },
                "cooling_enabaled": {
                    "type": "boolean"
                },
                "cooling_type": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fllor_id": {
                    "type": "string"
                },
                "heating_enabled": {
                    "type": "boolean"
                },
                "heating_type": {
                    "type": "string"
                },
                "house_id": {
                    "type": "string"
                },
                "humidity": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "light_level": {
                    "type": "string"
                },
                "occupancy": {
                    "type": "string"
                },
                "temperature": {
                    "type": "string"
                },
                "updated_By": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "ventilation_enabled": {
                    "type": "boolean"
                },
                "ventilation_type": {
                    "type": "string"
                }
            }
        },
        "model.Sensor": {
            "type": "object",
            "required": [
                "created_by",
                "floor_id",
                "house_id",
                "name",
                "refresh_rate",
                "room_id",
                "status"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "floor_id": {
                    "type": "string"
                },
                "house_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "max_reading": {
                    "type": "string"
                },
                "min_reading": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reading": {
                    "type": "string"
                },
                "refresh_rate": {
                    "$ref": "#/definitions/time.Duration"
                },
                "room_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "model.SensorReading": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "reading": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "required": [
                "active_status",
                "address_type",
                "created_by",
                "district",
                "email",
                "name",
                "nation",
                "password",
                "primary_mobile_number",
                "state"
            ],
            "properties": {
                "active_status": {
                    "type": "boolean"
                },
                "address_type": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "district": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "house_name": {
                    "type": "string"
                },
                "house_no": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "landline_number": {
                    "type": "integer"
                },
                "landmark": {
                    "type": "string"
                },
                "lane_name": {
                    "type": "string"
                },
                "lane_number": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "org_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "post": {
                    "type": "string"
                },
                "primary_mobile_number": {
                    "type": "integer"
                },
                "publisher": {
                    "type": "string"
                },
                "secondary_mobile_number": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "village": {
                    "type": "string"
                }
            }
        },
        "model.UserSignIn": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-Token",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "User API",
	Description:      "API for managing users",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
